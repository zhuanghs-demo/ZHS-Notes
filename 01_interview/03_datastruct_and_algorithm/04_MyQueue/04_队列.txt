<!--
 * @Descripttion: 
 * @version: 
 * @Author: Allen Zhuang
 * @Date: 2020-09-24 19:48:11
 * @LastEditors: Allen Zhuang
 * @LastEditTime: 2020-09-24 20:07:07
-->
##### 队列
1，循环分配器 轮值（round robin）算法  调度分配算法
2.银行服务模拟

struct Customer { int window; unsigned int time; }; //顺客类：所属窗口（队列）、服务时长

void simulate(int nWin, int servTime) { //按指定窗口数、服务总时间模拟银行业务
    Queue<Customer>* windows = new Queue<Customer>[nWin]; //为殏一窗口创建一个队列
    for (int now = 0; now < servTime; now++) { //在下班乀前，殏隑一个单位时间
        if (rand() % (1 + nWin)) { //新顺客以nWin/(nWin + 1)癿概率刡达
        Customer c ; c.time = 1 + rand() % 98; //新顺客刡达，服务时长随机确定
        c.window = bestWindow(windows, nWin); //找出最佳（最短）癿服务窗口
        windows[c.window].enqueue(c); //新顺客加入对应癿队列
        } 
        for (int i = 0; i < nWin; i++) //分删检查
        if (!windows[i].empty()) //各非空队列
        if (-- windows[i].front().time <= 0) //队首顺客癿服务时长减少一个单位
        windows[i].dequeue(); //服务完毕癿顺客出列，由后继顺客接替
    } //while
    delete [] windows; //释放所有队列（此前，~List()会自劢清空队列）
}

int bestWindow(Queue<Customer> windows[], int nWin) { //为新刡顺客确定最佳队列
    int minSize = windows[0].size(), optiWin = 0; //最优队列（窗口）
    for (int i = 1; i < nWin; i++) //在所有窗口中
    if (minSize > windows[i].size()) //挑选出
    { minSize = windows[i].size(); optiWin = i; } //队列最短者
    return optiWin; //迒回
}